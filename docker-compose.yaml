version: "3.3"

#name: bb-big-data-desafio

networks:
  bb-big-data-desafio-network:
    driver: bridge

volumes:
    nifi_storage: {}
    prometheus_storage: {}
    grafana_storage: {}
    mongodb_storage: {}

    # nifi_provenance: {}
    # nifi_flowfile: {}
    # nifi_content: {}
    # nifi_db: {}
    # nifi_state: {}
    # nifi_conf: {}

services:
#   elasticsearch:
#     container_name: elasticsearch
#     hostname: elasticsearch
#     image: docker.elastic.co/elasticsearch/elasticsearch:7.14.0
#     networks:
#       - bb-big-data-desafio-network
#     ports:
#       - 9200:9200
#       - 9300:9300
#     environment:
#       - discovery.type=single-node
#       - TZ=America/Sao_Paulo

  nifi:
    container_name: nifi
    hostname: nifi
    image: apache/nifi:latest
    user: root
    # depends_on:
    #   - elasticsearch
    restart: unless-stopped
    networks:
      - bb-big-data-desafio-network
    ports:
      - 8443:8443
      - 8000:8000
    environment:
      - SINGLE_USER_CREDENTIALS_USERNAME=admin
      - SINGLE_USER_CREDENTIALS_PASSWORD=nifibigdatabb
      - TZ=America/Sao_Paulo
    volumes:
      # - ./nifi/database_repository:/opt/nifi/nifi-current/database_repository
      # - ./nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
      # - ./nifi/content_repository:/opt/nifi/nifi-current/content_repository
      # - ./nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
      # - ./nifi/state:/opt/nifi/nifi-current/state
      # - ./nifi/logs:/opt/nifi/nifi-current/logs

      # - nifi_conf:/opt/nifi/conf
      # - nifi_state:/data/nifi/state
      # - nifi_db:/opt/nifi/database_repository
      # - nifi_flowfile:/opt/nifi/flowfile_repository
      # - nifi_content:/opt/nifi/content_repository
      # - nifi_provenance:/opt/nifi/provenance_repository

      - nifi_storage:/opt/nifi
      
  zookeeper:
    container_name: zookeeper
    hostname: zookeeper
    image: confluentinc/cp-zookeeper:latest
    networks:
      - bb-big-data-desafio-network
    restart: always
    ports:
      - 2182:2181
    environment:
      - ZOO_MY_ID=1
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - TZ=America/Sao_Paulo
      
  kafka:
    container_name: kafka
    hostname: kafka
    image: confluentinc/cp-kafka:latest
    networks:
      - bb-big-data-desafio-network
    depends_on:
      - zookeeper
    ports:
      - 9093:9092
      - 29094:29094
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENERS=PLAINTEXT://:29094,PLAINTEXT_HOST://:9092
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29094,PLAINTEXT_HOST://localhost:9093
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - TZ=America/Sao_Paulo

  init-kafka:
    container_name: init-kafka
    hostname: init-kafka
    image: confluentinc/cp-kafka:latest
    networks:
      - bb-big-data-desafio-network
    depends_on:
      - kafka
    environment:
      - TZ=America/Sao_Paulo
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      echo -e 'Creating kafka topics if not exists'
      kafka-topics --bootstrap-server kafka:29094 --create --if-not-exists --topic fligths --replication-factor 1 --partitions 1
      
      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29094 --list
      "

  cadvisor:
    container_name: cadvisor
    hostname: cadvisor
    image: gcr.io/cadvisor/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8080:8080
    networks:
      - bb-big-data-desafio-network
    restart: always
    # deploy:
    #   mode: global

  alertmanager:
    container_name: alertmanager
    hostname: alertmanager
    image: prom/alertmanager
    ports:
      - 9095:9093
    volumes:
      - ./docker/alertmanager/:/etc/alertmanager/
    networks:
      - bb-big-data-desafio-network
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  node-exporter:
    container_name: node-exporter
    hostname: node-exporter
    image: quay.io/prometheus/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /:/host:ro,rslave
    command: 
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - bb-big-data-desafio-network
    restart: always
    # deploy:
    #   mode: global

  prometheus:
    container_name: prometheus
    hostname: prometheus
    image: prom/prometheus:v2.36.2
    volumes:
      - ./docker/prometheus/storage/:/etc/prometheus/
      - prometheus_storage:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
      - alertmanager
    networks:
      - bb-big-data-desafio-network
    restart: always

  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana
    depends_on:
      - prometheus
    volumes:
      - ./docker/grafana/config/dashboard.yaml:/etc/grafana/provisioning/dashboards/main.yaml
      - ./docker/grafana/dashboards:/var/lib/grafana/dashboards
      - ./docker/grafana/storage/provisioning/:/etc/grafana/provisioning/
      - grafana_storage:/var/lib/grafana
    env_file:
      - ./docker/grafana/config/config.monitoring
    environment:
      - TZ=America/Sao_Paulo
    networks:
      - bb-big-data-desafio-network
    ports:
      - 3000:3000
    restart: always
 

  # # mongo-express:
  # #   image: mongo-express
  # #   ports:
  # #     - 8081:8081
  # #   environment:
  # #     ME_CONFIG_BASICAUTH_USERNAME: admin
  # #     ME_CONFIG_BASICAUTH_PASSWORD: admin
  # #     ME_CONFIG_MONGODB_PORT: 27017
  # #     ME_CONFIG_MONGODB_ADMINUSERNAME: root
  # #     ME_CONFIG_MONGODB_ADMINPASSWORD: root
  # #   links:
  # #     - mongo
  # #   networks:
  # #     - bb-big-data-desafio-network

  # # mongo:
  # #   image: mongo
  # #   environment:
  # #     MONGO_INITDB_ROOT_USERNAME: root
  # #     MONGO_INITDB_ROOT_PASSWORD: root
  # #   ports:
  # #     - "27017:27017"
  # #   volumes:
  # #     - mongodb_storage:/data/db
  # #   networks:
  # #     - bb-big-data-desafio-network
  
